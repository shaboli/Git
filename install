to install
http://www.vogella.com/articles/Git/article.html#gitdefintion

1. create the ssh key - it will be created in .ssh dir in 'user'.
   the directory is hidden so run:
   "defaults write com.apple.finder AppleShowAllFiles -bool true" 
   "killall Finder"

2.  keys name need to be id_rsa
    Finding what keys ssh is offering to the server is fairly simple. 
	Run "ssh -vT git@github.com"
3.  test connection using "ssh -T git@github.com" and with the password you enter in the ssh key "ykm_dev"

msysgit - windows

--general git config
git config --global user.name lior
git config --global user.email guyb@microsoft.com

--ssh creation
ssh-keygen -c "guyb@microsoft.com" -t rsa - create key
ssh -T git@github.com


git init - start new project repository
git add . - add files to index

# See the current status of your repository 
# (which files are changed / new / deleted)
!!!!!!  git status  !!!!!!

.gitignore - ignore sections and files in code
git rm -f udpClient.xcodeproj  - remove file from index, used when we want to ignore the file but he is in the index

# This starts a nice graphical view of the changes
gitk --all

# Commit the changes, -a will commit changes for modified files
# but will not add automatically new files
!!!!!!!!  git commit -a -m "These are new changes"  !!!!!!!

# Show the history of commits in the current branch
git log

# Show the differences between the uncommitted files 
# and the last commit in the current branch
git diff



DELETE
If you delete a file which is under version control git add . will not pick this file up. 
You need to use the git commit command with the -a flag or the -A flag in the git add command.
# Try standard way of committing -> will not work 
git add . && git commit -m "a new file has been created"
# Now commit with the -a flag
git commit -a -m "File nonsense.txt is now removed"
# Alternatively you could add deleted files to the staging index via
git add -A . 
git commit -m "File nonsense.txt is now removed"




# Show the existing defined remote repositories
git remote



git remote add origin git@github.com:shaboli/Folder.git - create new remote repository with name origin
git pull origin master - pull changes from server
!!!!!!!  git push -u origin master  !!!!!!! - push changes to server



BRANCH
#If you want to see all branches (including remote branches), use the following command.
git branch -a

# You can merge changes from one branch to the current active one via the following command.
# Syntax: git merge <branch-name>
git merge testing

#Delete branch testing
git branch -d testing








Step 1: Check for SSH keys

Have an existing keypair you'd like to use? You can skip to Step 4.

First, we need to check for existing ssh keys on your computer. Open up Terminal and run:

cd ~/.ssh
# Checks to see if there is a directory named ".ssh" in your user directory

If it says "No such file or directory" skip to step 3. Otherwise continue to step 2.

Step 2: Backup and remove existing SSH keys

Since there is already an SSH directory you'll want to back the old one up and remove it:

ls
# Lists all the subdirectories in the current directory

# config  id_rsa  id_rsa.pub  known_hosts

mkdir key_backup
# Makes a subdirectory called "key_backup" in the current directory


cp id_rsa* key_backup
# Copies the id_rsa keypair into key_backup


rm id_rsa*
# Deletes the id_rsa keypair

Step 3: Generate a new SSH key

To generate a new SSH key, enter the code below. We want the default settings so when asked to enter a file in which to save the key, just press enter.

 ssh-keygen -t rsa -C "your_email@youremail.com"
# Creates a new ssh key using the provided email

# Generating public/private rsa key pair.
# Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]
Now you need to enter a passphrase.

Why do passphrases matter?
# Enter passphrase (empty for no passphrase): [Type a passphrase]
# Enter same passphrase again: [Type passphrase again]
Which should give you something like this:

 # Your identification has been saved in /Users/you/.ssh/id_rsa.
# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
# The key fingerprint is:
# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com
Step 4: Add your SSH key to GitHub

Run the following code to copy the key to your clipboard.

pbcopy < ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard

Be warned: it is important to copy the key exactly without adding newlines or whitespace. Thankfully the pbcopy command makes it easy to perform this setup perfectly.

 Go to your Account Settings
Click "SSH Keys" in the left sidebar
Click "Add SSH key"
Paste your key into the "Key" field
Click "Add key"
Confirm the action by entering your GitHub password
Step 5: Test everything out

To make sure everything is working you'll now SSH to GitHub. When you do this, you will be asked to authenticate this action using your password, which for this purpose is the passphrase you created earlier. Don't change the git@github.com part. That's supposed to be there.

ssh -T git@github.com
# Attempts to ssh to github

You may see this warning:

# The authenticity of host 'github.com (207.97.227.239)' can't be established.
# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
# Are you sure you want to continue connecting (yes/no)?
Don't worry, this is supposed to happen. Verify that the fingerprint matches the one here and type "yes".

# Hi username! You've successfully authenticated, but GitHub does not
# provide shell access.
If that username is correct, you've successfully set up your SSH key. Don't worry about the shell access thing, you don't want that anyway.

If you see "access denied" please consider using HTTPS instead of SSH. If you need SSH start at these instructions for diagnosing the issue.
